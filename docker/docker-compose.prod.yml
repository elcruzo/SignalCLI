# Production Docker Compose for SignalCLI
version: '3.8'

services:
  # Main SignalCLI Application
  signalcli:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    image: signalcli:latest
    container_name: signalcli-app
    restart: unless-stopped
    ports:
      - "${API_PORT:-8000}:8000"
      - "${MCP_PORT:-8001}:8001"
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=8000
      - MCP_PORT=8001
      - WEAVIATE_HOST=${WEAVIATE_HOST:-weaviate}
      - WEAVIATE_PORT=${WEAVIATE_PORT:-8080}
      - REDIS_HOST=${REDIS_HOST:-redis}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - LLM_MODEL_PATH=${LLM_MODEL_PATH:-/app/models/llama-2-7b-chat.Q4_K_M.gguf}
    volumes:
      - ../data/models:/app/models:ro
      - ../logs:/app/logs
      - ../config:/app/config:ro
    depends_on:
      weaviate:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - signalcli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4'
        reservations:
          memory: 4G
          cpus: '2'

  # Vector Store (Weaviate)
  weaviate:
    image: semitechnologies/weaviate:1.21.0
    container_name: signalcli-weaviate
    restart: unless-stopped
    ports:
      - "${WEAVIATE_PORT:-8080}:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      CLUSTER_HOSTNAME: 'node1'
      ENABLE_MODULES: 'backup-filesystem,offload-s3'
    volumes:
      - weaviate-data:/var/lib/weaviate
    networks:
      - signalcli-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Cache (Redis)
  redis:
    image: redis:7-alpine
    container_name: signalcli-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    command: redis-server --appendonly yes --maxmemory 1gb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - signalcli-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: signalcli-prometheus
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ../monitoring/prometheus:/etc/prometheus:ro
      - prometheus-data:/prometheus
    networks:
      - signalcli-network
    depends_on:
      - signalcli
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: signalcli-grafana
    restart: unless-stopped
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - signalcli-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log Aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: signalcli-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki
    networks:
      - signalcli-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Log Collection (Optional)
  promtail:
    image: grafana/promtail:latest
    container_name: signalcli-promtail
    restart: unless-stopped
    volumes:
      - ../logs:/var/log/signalcli:ro
      - ../monitoring/promtail:/etc/promtail:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - signalcli-network
    depends_on:
      - loki

  # Reverse Proxy (Nginx)
  nginx:
    image: nginx:alpine
    container_name: signalcli-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ../config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    networks:
      - signalcli-network
    depends_on:
      - signalcli
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

# Networks
networks:
  signalcli-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  weaviate-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../data/vector_store

  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../data/cache

  prometheus-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../monitoring/prometheus/data

  grafana-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ../monitoring/grafana/data

  loki-data:
    driver: local

  nginx-logs:
    driver: local