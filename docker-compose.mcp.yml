version: '3.8'

services:
  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: docker/Dockerfile.mcp
    container_name: signalcli-mcp
    ports:
      - "8001:8001"  # MCP Server port
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8001
      - MCP_WORKERS=4
      - CACHE_PROVIDER=redis
      - REDIS_URL=redis://redis:6379/1
      - VECTOR_STORE_PROVIDER=weaviate
      - WEAVIATE_URL=http://weaviate:8080
    volumes:
      - ./models:/app/models
      - ./data:/app/data
      - mcp-cache:/app/cache
    depends_on:
      - redis
      - weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/mcp/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - signalcli-network

  # Main API Server
  api-server:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: signalcli-api
    ports:
      - "8000:8000"  # Main API port
    environment:
      - ENV=production
      - LOG_LEVEL=INFO
      - CACHE_PROVIDER=redis
      - REDIS_URL=redis://redis:6379/0
      - VECTOR_STORE_PROVIDER=weaviate
      - WEAVIATE_URL=http://weaviate:8080
      - MCP_SERVER_URL=http://mcp-server:8001
    volumes:
      - ./models:/app/models
      - ./data:/app/data
    depends_on:
      - redis
      - weaviate
      - mcp-server
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - signalcli-network

  # Weaviate Vector Store
  weaviate:
    image: semitechnologies/weaviate:1.22.5
    container_name: signalcli-weaviate
    ports:
      - "8080:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: ''
      CLUSTER_HOSTNAME: 'weaviate'
    volumes:
      - weaviate-data:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - signalcli-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: signalcli-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - signalcli-network

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: signalcli-nginx
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-server
      - mcp-server
    networks:
      - signalcli-network

  # Prometheus (optional - for metrics)
  prometheus:
    image: prom/prometheus:latest
    container_name: signalcli-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - signalcli-network

  # Grafana (optional - for visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: signalcli-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - signalcli-network

volumes:
  weaviate-data:
  redis-data:
  mcp-cache:
  prometheus-data:
  grafana-data:

networks:
  signalcli-network:
    driver: bridge
