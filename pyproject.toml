[build-system]
requires = ["setuptools>=65", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "signalcli"
version = "1.0.0"
description = "LLM-Powered Knowledge CLI with RAG and structured JSON output"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "SignalCLI Team", email = "team@signalcli.dev"}
]
maintainers = [
    {name = "SignalCLI Team", email = "team@signalcli.dev"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.9"
dependencies = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "click>=8.1.7",
    "rich>=13.7.0",
    "httpx>=0.25.2",
    "transformers>=4.36.0",
    "torch>=2.1.0",
    "sentence-transformers>=2.2.2",
    "weaviate-client>=3.25.3",
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
    "pyyaml>=6.0.1",
    "python-dotenv>=1.0.0",
    "redis>=5.0.1",
    "python-multipart>=0.0.6",
    "jsonschema>=4.21.1",
    "numpy>=1.26.3",
    "scikit-learn>=1.4.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.1",
    "black>=23.11.0",
    "ruff>=0.1.14",
    "mypy>=1.7.1",
    "pre-commit>=3.6.0",
]
llama = [
    "llama-cpp-python>=0.2.38",
]
gpu = [
    "accelerate>=0.26.1",
]

[project.urls]
Homepage = "https://github.com/signalcli/signalcli"
Documentation = "https://docs.signalcli.dev"
Repository = "https://github.com/signalcli/signalcli"
Issues = "https://github.com/signalcli/signalcli/issues"

[project.scripts]
signalcli = "src.cli.main:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*"]
exclude = ["tests*"]

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true
exclude = [
    "tests/",
    "build/",
    "dist/",
]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = [
    "tests",
]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
markers = [
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]